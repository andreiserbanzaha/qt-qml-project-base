# configurations
include(CMakePackageConfigHelpers)
set(${PROJECT_NAME}_INSTALL_CONFIGDIR "${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}")

set(_${PROJECT_NAME}_CMAKE_GENERATED_PATH "${CMAKE_CURRENT_BINARY_DIR}/cmake/${PROJECT_NAME}")
set(_${PROJECT_NAME}_VERSION_FILE "${_${PROJECT_NAME}_CMAKE_GENERATED_PATH}/${PROJECT_NAME}-config-version.cmake")
write_basic_package_version_file(${_${PROJECT_NAME}_VERSION_FILE}
    VERSION ${PROJECT_VERSION}
    COMPATIBILITY SameMajorVersion
)

set(_${PROJECT_NAME}_CONFIG_FILE "${_${PROJECT_NAME}_CMAKE_GENERATED_PATH}/${PROJECT_NAME}-config.cmake")
configure_package_config_file(
  ${CMAKE_CURRENT_SOURCE_DIR}/cmake/${PROJECT_NAME}-config.cmake.in
  ${_${PROJECT_NAME}_CONFIG_FILE}
  INSTALL_DESTINATION
    ${${PROJECT_NAME}_INSTALL_CONFIGDIR}
)

# install binary
include(GNUInstallDirs)
install(
  TARGETS
    ${PROJECT_NAME}
  EXPORT ${PROJECT_NAME}-targets
  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
)

install(
  DIRECTORY
    ${CMAKE_CURRENT_SOURCE_DIR}/inc/
    ${CMAKE_CURRENT_BINARY_DIR}/generated/
  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
  FILES_MATCHING
  PATTERN "*.hpp"
  PATTERN "*.inl"
  PATTERN "*.h"
  PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ
)

install(
  FILES
    ${_${PROJECT_NAME}_VERSION_FILE}
    ${_${PROJECT_NAME}_CONFIG_FILE}
  DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}
  PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ
)

install(
  EXPORT ${PROJECT_NAME}-targets
  NAMESPACE ${PROJECT_NAME}::
  DESTINATION ${${PROJECT_NAME}_INSTALL_CONFIGDIR}
)
